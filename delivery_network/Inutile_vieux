def graph_from_file(filename):
    """
    Reads a text file and returns the graph as an object of the Graph class.
    The file should have the following format: 
        The first line of the file is 'n m'
        The next m lines have 'node1 node2 power_min dist' or 'node1 node2 power_min' (if dist is missing, it will be set to 1 by default)
        The nodes (node1, node2) should be named 1..n
        All values are integers.
    Parameters: 
    -----------
    filename: str
        The name of the file
    Outputs: 
    -----------
    G: Graph
        An object of the class Graph with the graph from file_name.
    """
    with open(filename, "r") as file:
        n, m = map(int, file.readline().split())
        g = Graph(range(1, n+1))
        for _ in range(m):
            edge = list(map(int, file.readline().split()))
            if len(edge) == 3:
                node1, node2, power_min = edge
                g.add_edge(node1, node2, power_min) # will add dist=1 by default
            elif len(edge) == 4:
                node1, node2, power_min, dist = edge
                g.add_edge(node1, node2, power_min, dist)
            else:
                raise Exception("Format incorrect")
    return g








def useful_trucks(file_truck):
    """_summary_

    Args:
        file_truck (_type_): _description_

    Returns:
        dictionary: find the trucks that are useful among those of a file trucks.x.in
        i.e. cost_i < cost_j si use_i < use_j
        The goal is to do preprocessing
    """
    f = open(file_truck, "r") 
    lignes = f.readlines()
    n = lignes[0]
    n = int(n)
    d = dict()
    d[1] = "Useful"
    for i in range(2, n+1):
        last_truck = list(lignes[i-1].split())
        truck = list(lignes[i].split())
        last_cost = int(last_truck[1])
        cost = int(truck[1])
        d[i] = "Useful"
        if last_cost > cost:
            d[i-1] = "Useless"
    return d


def useful_trucks_list(file_truck):
    """_summary_

    Args:
        file_truck (_type_): _description_

    Returns:
        goodtrucks: only keeps in a list the trucks that are useful among those of a file trucks.x.in
        i.e. cost_i < cost_j si use_i < use_j
        Qualification: only works if the power of the trucks are set in an increasing order
    """
    f = open(file_truck, "r") 
    lignes = f.readlines()
    n = lignes[0]
    n = int(n)
    goodtrucks = []
    first_truck = list(lignes[1].split())
    goodtrucks.append(first_truck)
    for i in range(2, n+1):
        last_truck = list(lignes[i-1].split())
        truck = list(lignes[i].split())
        last_cost = int(last_truck[1])
        cost = int(truck[1])
        if last_cost > cost:
            goodtrucks.pop()
        goodtrucks.append(truck)
    return goodtrucks


def possible_trucks(self, file_truck, src, dest):
    """_summary_
    Args:
        file_truck (_type_): _description_
        src (_type_): _description_
        dest (_type_): _description_

    Returns:
        dictionary: find the trucks that are possible among those of a file trucks.x.in
        considering one graph and one journey in particular.
    """
    with open(file_truck, "r") as file:
        n = file.readline()
        n = int(n)
        d = dict()
        for i in range(1,n+1):
            truck = list(file.readline().split())
            power = int(truck[0])
            print(self.min_power(src, dest)[0])
            if int(self.min_power(src, dest)[0]) >= power:
                d[i] = True
            else:
                d[i] = False
    return d

# Début brouillon
# Fonction test qui regarde les premiers camions


def useful_truckstest(file_truck):
    """_summary_

    Args:
        file_truck (_type_): _description_

    Returns:
        dictionary: find the trucks that are useful among those of a file trucks.x.in
        i.e. cost_i < cost_j si use_i < use_j
    """
    f = open(file_truck, "r") 
    lignes = f.readlines()
    n = lignes[0]
    n = int(n)
    d = dict()
    d[1] = "Useful"
    for i in range(2, 6):
        last_truck = list(lignes[i-1].split())
        truck = list(lignes[i].split())
        last_cost = int(last_truck[1])
        cost = int(truck[1])
        d[i] = "Useful"
        print(truck)
        print("last_cost = ", last_cost)
        print("cost = ", cost)
        if last_cost > cost:
            d[i-1] = "Useless"
    return d


def useful_trucks_listtest(file_truck):
    """_summary_

    Args:
        file_truck (_type_): _description_

    Returns:
        dictionary: find the trucks that are useful among those of a file trucks.x.in
        i.e. cost_i < cost_j si use_i < use_j
    """
    f = open(file_truck, "r") 
    lignes = f.readlines()
    n = lignes[0]
    n = int(n)
    goodtrucks = []
    first_truck = list(lignes[1].split())
    goodtrucks.append(first_truck)
    for i in range(2, 6):
        last_truck = list(lignes[i-1].split())
        truck = list(lignes[i].split())
        last_cost = int(last_truck[1])
        cost = int(truck[1])
        if last_cost > cost:
            goodtrucks.pop()
        goodtrucks.append(truck)
    return goodtrucks
# Fin brouillon


    def dfsMatthieu(self): #question 5 séance 2 
        """Finds the deoth of a node relative to an origin node."""
        depth=0
        depths={}
        parents={self.nodes[0]:[self.nodes[0],0]}
        visited=[]

        def explore(node,depth):
            depths[node]=depth
            visited.append(node)
            for neighbor,power_min,dist in self.graph[node]:
                if neighbor not in visited:
                    explore(neighbor,depth+1)
                    parents[neighbor]=[node,power_min]
            return depths, parents  
              
        depths,parents=explore(self.nodes[0], 0)
        
        """for nodes in self.nodes:
            for neighbor,power_min,dist in self.graph[nodes]:
                if neighbor not in visited_1 :
                    visited_1.append(neighbor)
                    parents[neighbor]=[nodes,power_min]"""
        
        return depths, parents


"""
    def get_power_and_path(self,src,dest): #question 5 séance 2 
        depth_1=self.depths[src] # dfsCMpro?
        depth_2=self.depths[dest]
        parent_1=src
        parent_2=dest
        path=[parent_1]
        L=[]
        list_power=[]

        if depth_1 > depth_2:
            while self.depths[parent_1]>depth_2:
                list_power.append(self.parents[parent_1][1])
                parent_1=self.parents[parent_1][0]
                path.append(parent_1)
                print(1)
            path.append(parent_1)
                
        elif depth_2 > depth_1 :
            while self.depths[parent_2]>depth_1:
                L=[parent_2]+L
                list_power.append(self.parents[parent_2][1])
                parent_2=self.parents[parent_2][0]
                
            L=[parent_2]+L
                
        while parent_1 != parent_2 :
            path.append(self.parents[parent_1][0])
            L=[self.parents[parent_2][0]]+L
            list_power.append(self.parents[parent_1][1])
            list_power.append(self.parents[parent_2][1])
            parent_1= self.parents[parent_1][0]
            parent_2= self.parents[parent_2][0]
            print(3)

        path.pop()
        path=path+L
        print(path)
        print(list_power)

        return [max(list_power),path]
"""

""" Old version

    def dfs(self): #question 5 séance 2 
        
        depth=0
        depths={}
        parents={self.nodes[0]:[self.nodes[0],0]}
        visited=[]
        visited_1=[self.nodes[0]]

        def explore(node,depth):
            depths[node]=depth
            visited.append(node)
            for neighbor,power_min,dist in self.graph[node]:
                if neighbor not in visited:
                    explore(neighbor,depth+1)
                    parents[neighbor]=[node,power_min]
     
            return depths
              
        depths=explore(self.nodes[0], 0)
        
  #      for nodes in self.nodes:
   #         for neighbor,power_min,dist in self.graph[nodes]:
    #            if neighbor not in visited_1 :
     #               visited_1.append(neighbor)
      #              parents[neighbor]=[nodes,power_min]
        
        self.depths = depths
        self.parents = parents

def route_x_out(filename,filename_1): #question 6 

    g=graph_from_file(filename)
    g_mst=kruskal(g)
    f=open("input/route.x.out","a")
    with open(filename_1, "r") as file:
        #n = map(int, file.readline())
        n = int(file.readline())
        for j in range(n):
            src,dest,profit=list(map(int, file.readline().split()))
            g_mst.dfs()
            power_min=g_mst.get_power_and_pathCMpro(src,dest)[0]
            f.write(str(power_min))
        f.close()
"""